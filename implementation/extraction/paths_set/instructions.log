f32.store
i32.store
i32.le_u
f32.sqrt
f64.abs
if
i64.load16_u
f32.convert_i64_u
f64.copysign
i64.le_s
i64.gt_s
memory.copy
i32.load16_s
f32.sub
i32.atomic.load
i64.trunc_f32_u
i32.popcnt
i32.and
br_if
br
i32.extend8_s
i32.atomic.rmw.xchg
i64.shl
return
i64.div_u
unreachable
i32.trunc_f32_s
f32.convert_i64_s
i64.extend_i32_u
i32.gt_u
i32.atomic.rmw.cmpxchg
f32.le
f64.ge
global.get
i64.div_s
loop
i64.ctz
i64.store
f64.le
select
i32.load8_s
f32.nearest
call
block
f32.mul
i64.add
f32.div
i64.trunc_f64_s
i64.le_u
i64.reinterpret_f64
y
i64.or
f32.min
i64.load16_s
i32.atomic.rmw.sub
atomic.fence
i64.popcnt
i64.trunc_f32_s
f32.load
f64.gt
i32.eq
i64.load8_u
f32.neg
f64.sub
f64.min
i32.store8
i64.store8
i32.lt_u
i64.ne
i64.extend_i32_s
f64.ceil
i32.shr_s
f32.max
i32.rotl
f32.const
i32.load16_u
i32.atomic.load8_u
i64.ge_s
i64.store32
f64.ne
i32.or
i64.rotl
i64.lt_s
i64.rem_u
i32.ne
f32.convert_i32_s
i32.atomic.store8
drop
f64.store
i32.ctz
i64.store16
i32.clz
f32.ceil
i32.const
i32.store16
f64.add
f32.ne
f32.floor
f64.neg
i32.ge_u
f64.mul
i32.rem_u
f32.lt
i32.atomic.rmw.add
i64.and
i32.rem_s
f32.ge
else
i32.xor
i64.const
i64.load
i64.eq
i32.trunc_f64_u
i32.shl
i64.extend32_s
local
i64.load32_u
f64.lt
i64.xor
memory.fill
global.set
i32.extend16_s
i32.eqz
i32.trunc_f64_s
i32.div_u
f64.convert_i32_s
i32.div_s
f64.convert_i64_u
f64.eq
i64.clz
f64.promote_f32
f64.sqrt
f64.load
i64.gt_u
l
f64.div
i32.lt_s
i32.trunc_f32_u
f64.convert_i32_u
local.tee
br_table
i64.mul
i64.shr_s
f32.add
f64.trunc
end
i64.shr_u
i64.sub
f64.floor
i32.add
i64.load8_s
i32.wrap_i64
f32.abs
i64.eqz
i64.trunc_f64_u
i32.rotr
i64.lt_u
i64.load32_s
f32.reinterpret_i32
f64.convert_i64_s
i32.ge_s
f32.demote_f64
call_indirect
f32.convert_i32_u
i32.le_s
local.get
i32.sub
i32.mul
f32.gt
i32.load
i32.gt_s
i64.rem_s
f32.eq
local.set
i32.shr_u
f64.max
f32.copysign
i64.rotr
i32.load8_u
f64.nearest
i64.extend16_s
f64.const
i64.ge_u
f64.reinterpret_i64
i32.reinterpret_f32
